#!/usr/bin/env bash

set -u
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly CONF_DIR=$HOME/.stem
readonly WINE_STEAM_DIR="$HOME/.wine/drive_c/Program Files"
readonly WINE_STEAM_EXE="$WINE_STEAM_DIR/Steam/Steam.exe"
readonly VERSION="0.0.2"

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=
OPT_KILL_DRIVER=
OPT_DRIVER_CONDITIONAL=
OPT_PROFILE_LOADONLY=
OPT_PROFILE_LOADPLAY=default
OPT_LIST_PROFILES=
OPT_LIST_PROCESSES=
OPT_LIST_DEVICES=
OPT_STANDALONE=
OPT_WINE=
OPT_ID=

error () {
  echo -e "\e[0;31m\e[1mError: \e[0;0m$@" >&2
  exit 1
}

warning () {
  echo -e "\e[0;33m\e[1mWarning: \e[0;0m$@" >&2
  return 1
}

mute () {
  $@ > /dev/null 2>&1
}

debug () {
  if [[ -n "$OPT_DEBUG" ]]; then
      echo '**'
      echo \$@: $@
      echo \$OPT_HELP: "$OPT_HELP"
      echo \$OPT_DEBUG: "$OPT_DEBUG"
      echo \$OPT_VERBOSE: "$OPT_VERBOSE"
  fi
}

parse_arguments () {
  debug parse_arguments "$@"

  local opts=$(getopt -n "$SELF" --options hdvkcx:X:plLsw \
                      --longoptions help,debug,verbose,kill,conditional,load-only:,load-play:,list-profiles,list-processes,list-devices,standalone,wine -- "$@")

  [[ $? != 0 ]] && error "failed to parse arguments."

  eval set -- "$opts"

  while true; do
    case "$1" in
      (-h|--help) OPT_HELP=true; shift ;;
      (-d|--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;
      (-k|--kill) OPT_KILL_DRIVER=true; shift ;;
      (-c|--conditional) OPT_DRIVER_CONDITIONAL=true; shift ;;
      (-x|--load-only) OPT_PROFILE_LOADONLY=$2; shift 2 ;;
      (-X|--load-play) OPT_PROFILE_LOADPLAY=$2; shift 2 ;;
      (-p|--list-profiles) OPT_LIST_PROFILES=true; shift ;;
      (-l|--list-processes) OPT_LIST_PROCESSES=true; shift ;;
      (-L|--list-devices) OPT_LIST_DEVICES=true; shift ;;
      (-s|--standalone) OPT_STANDALONE=ture; shift ;;
      (-w|--wine) OPT_WINE=true; shift ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done

  OPT_ID=${@:-1}
}

process_arguments () {
  debug process_arguments "$@"

  if [[ -n "$OPT_HELP" || "$#" -lt 1 ]]; then
      display_usage
  else
    return 0
  fi
}

display_usage () {
  cat <<EOF
$SELF $VERSION: a Steam application launcher with Xbox controller support

USAGE: $SELF [OPTIONS] <STEAM_APP_ID>

OPTIONS:
-h, --help                Display this help
-d, --debug               Display debugging messages
-v, --verbose             Enable verbose output
-k, --kill                Kill xboxdrv instances
-c, --conditional         Load an xboxdrv profile, only if none is loaded
-x, --load-only <profile> Load an xboxdrv profile, then quit
-X, --load <profile>      Load an xboxdrv profile, then load game
-p, --list-profiles       List xboxdrv profiles
-l, --list-processes      List xboxdrv instances
-L, --list-devices        List detected devices
-s, --standalone          Run standalone Steam
-w, --wine                Use Wine to launch Steam

Visit https://github.com/ebzzry/stem for more information
EOF
  exit 0
}

check_privileges () {
  if [[ "$(id -u)" != 0 ]]; then
      error "This program must be ran as root."
  else
    return 0
  fi
}

kill_driver () {
  mute sudo killall xboxdrv
}

device_count () {
  local device_code=$(xboxdrv -L | egrep -q '^no controller detected$'; echo $?)

  if [[ "${device_code}" == 0 ]]; then
      echo 0
  else
    echo $(xboxdrv -L | sed 1,2d | wc -l)
  fi
}

check_devices () {
  local count=

  if [[ -z "$OPT_STANDALONE" ]]; then
      count=$(device_count)

      if [[ "$count" == 0 ]]; then
          error "Please plug-in the controllers, then re-run this program."
      fi
  fi
}

count_driver_instances () {
  list_processes | wc -l
}

loaded_driver () {
  if [[ "$(count_driver_instances)" == 0 ]]; then
      return 1
  else
    return 0
  fi
}

load_driver () {
  local profile=${1:-$OPT_PROFILE_LOADPLAY}
  local count=$(device_count)

  if [[ -z "$OPT_STANDALONE" ]]; then
      kill_driver

      for id in $(seq $count); do
        if [[ ! -f "$CONF_DIR/${profile}_${id}.xboxdrv" ]]; then
            warning "The profile $CONF_DIR/${profile}_${id}.xboxdrv does not exist"
        else
          mute sudo xboxdrv --id $((id-1)) --type xbox360 \
               -c $CONF_DIR/${profile}_${id}.xboxdrv &
        fi
      done
  fi
}

load_drivers () {
  if [[ -n "$OPT_DRIVER_CONDITIONAL" ]]; then
      if ! loaded_driver; then load_driver; fi
  else
    load_driver
  fi
}

list_processes () {
  pgrep -a xboxdrv
}

list_devices () {
  xboxdrv -L
}

list_profiles () {
  if [[ -e $CONF_DIR ]]; then
      ls $CONF_DIR | sed -e 's/_.*//' | egrep -v '*.txt' | uniq
  fi
}

exec_options () {
  if [[ -n "$OPT_HELP" ]]; then display_usage; fi
  if [[ -n "$OPT_LIST_PROFILES" ]]; then list_profiles; exit 0; fi
  if [[ -n "$OPT_LIST_PROCESSES" ]]; then list_processes; exit 0; fi
  if [[ -n "$OPT_LIST_DEVICES" ]]; then list_devices; exit 0; fi
  if [[ -n "$OPT_KILL_DRIVER" ]]; then kill_driver; exit 0; fi
  if [[ -n "$OPT_PROFILE_LOADONLY" ]]; then load_driver "$OPT_PROFILE_LOADONLY"; exit 0; fi
}

error_install () {
  error "Please install $@, then re-run this program."
}

check_wine () {
  if ! mute type -P wine; then
      error_install "wine"
  else
    return 0
  fi
}

check_windows_steam () {
  if [[ -f "$WINE_STEAM_EXE" ]]; then
      return 0
  else
    error_install "the Steam Windows client to $WINE_STEAM_DIR/"
  fi
}

check_driver () {
  if [[ -z "$OPT_STANDALONE" ]]; then
      if ! mute type -P xboxdrv; then
          error_install "xboxdrv"
      else
        return 0
      fi
  else
    return 0
  fi
}

check_programs () {
  if [[ -n "$OPT_WINE" ]]; then
      check_wine
      check_windows_steam
  fi

  check_driver
}

check_config () {
  if [[ ! -d $CONF_DIR ]]; then
      error "Please create $CONF_DIR, then re-run this program."
  fi
}

run_steam () {
  if [[ -n "$OPT_WINE" ]]; then
      WINEDEBUG=-all wine "$WINE_STEAM_EXE" $@
  else
    steam $@
  fi
}

launch () {
  if [[ $# -ge 0 && -n "$OPT_ID" ]]; then
      #run_steam "$OPT_ID"
      run_steam $@
  else
    display_usage
  fi
}

main () {
  debug main "$@"
  parse_arguments "$@"
  process_arguments "$@"
  #check_privileges
  exec_options $@
  check_programs
  check_config
  check_devices
  load_drivers
  launch $@
}

main $@
