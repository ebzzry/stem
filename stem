#!/usr/bin/env bash

set -u
set -o pipefail

SCRIPT_NAME=`basename $0`
CONF_DIR=$HOME/.xboxdrv
STEAM_DIR="$HOME/.wine/drive_c/Program Files"
STEAM_EXE="$STEAM_DIR/Steam/Steam.exe"

OPT_HELP=
OPT_KILL_DRIVER=
OPT_LIST_PROFILES=
OPT_LIST_PROCESSES=
OPT_LIST_DEVICES=
OPT_PROFILE_LOADONLY=
OPT_PROFILE_LOAD=default

error () {
  echo -e "\e[0;31m\e[1mError: \e[0;0m$@" >&2
  exit 1
}

warning () {
  echo -e "\e[0;33m\e[1mWarning: \e[0;0m$@" >&2
  return 1
}

mute () {
  $@ > /dev/null 2>&1
}

display_help () {
  cat <<EOF
Usage: $SCRIPT_NAME [OPTIONS] <STEAM_GAME_ID> <PROFILE>

OPTIONS:
-h          Display this help
-k          Kill xboxdrv instances
-p          List xboxdrv profiles
-l          List xboxdrv instances
-L          List detected devices
-x          Load an xboxdrv profile, then quit
-X          Load an xboxdrv profile, then load game
EOF
  exit 0
}

kill_driver () {
  mute sudo killall xboxdrv
}

device_count () {
  local device_code=$(xboxdrv -L | egrep -q '^no controller detected$'; echo $?)

  if [[ "${device_code}" == 0 ]]; then
      echo 0
  else
    echo $(xboxdrv -L | sed 1,2d | wc -l)
  fi
}

check_devices () {
  local count=$(device_count)

  if [[ "$count" == 0 ]]; then
      error "Please plug-in the controllers, then re-run this program."
  fi
}

count_driver_instances () {
  list_processes | wc -l
}

loaded_driver () {
  if [[ "$(count_driver_instances)" == 0 ]]; then
      return 1
  else
    return 0
  fi
}

load_driver () {
  local profile=${1:-$OPT_PROFILE_LOAD}
  local count=$(device_count)

  kill_driver

  for id in $(seq $count); do
    if [[ ! -f "$CONF_DIR/${profile}_${id}.xboxdrv" ]]; then
        warning "The profile $CONF_DIR/${profile}_${id}.xboxdrv does not exist"
    else
      mute sudo xboxdrv --id $((id-1)) \
           --type xbox360 \
           -c $CONF_DIR/${profile}_${id}.xboxdrv &
    fi
  done
}

list_processes () {
  pgrep -a xboxdrv
}

list_devices () {
  xboxdrv -L
}

list_profiles () {
  if [[ -e $CONF_DIR ]]; then
      ls $CONF_DIR | sed -e 's/_.*//' | egrep -v '*.txt' | uniq
  fi
}

exec_options () {
  if [[ -n "$OPT_HELP" ]]; then
      display_help
  fi

  if [[ -n "$OPT_LIST_PROFILES" ]]; then
      list_profiles
      exit 0
  fi

  if [[ -n "$OPT_LIST_PROCESSES" ]]; then
      list_processes
      exit 0
  fi

  if [[ -n "$OPT_LIST_DEVICES" ]]; then
      list_devices
      exit 0
  fi

  if [[ -n "$OPT_KILL_DRIVER" ]]; then
      kill_driver
      exit 0
  fi

  if [[ -n "$OPT_PROFILE_LOADONLY" ]]; then
      load_driver "$OPT_PROFILE_LOADONLY"
      exit 0
  fi
}

error_install () {
  error "Please install $@, then re-run this program."
}

check_wine () {
  if ! mute type -P wine; then
      error_install "wine"
  else
    return 0
  fi
}

check_steam () {
  if [[ -f "$STEAM_EXE" ]]; then
      return 0
  else
    error_install "the Steam Windows client to $STEAM_DIR/"
  fi
}

check_driver () {
  if ! mute type -P xboxdrv; then
      error_install "xboxdrv"
  else
    return 0
  fi
}

check_programs () {
  check_wine
  check_steam
  check_driver
}

check_config () {
  if [[ ! -d $CONF_DIR ]]; then
      error "Please create an $CONF_DIR, then re-run this program."
  fi
}

run_steam () {
  WINEDEBUG=-all wine "$STEAM_EXE" $@
}

launch () {
  if [[ $# == 0 || $# == 1 ]]; then
     run_steam ${1:-}
  else
    display_help
  fi
}

main () {
  while getopts ":hkpx:X:lL" opt; do
    case $opt in
      h) OPT_HELP=true ;;
      k) OPT_KILL_DRIVER=true ;;
      p) OPT_LIST_PROFILES=true ;;
      x) OPT_PROFILE_LOADONLY=${OPTARG} ;;
      X) OPT_PROFILE_LOAD=${OPTARG} ;;
      l) OPT_LIST_PROCESSES=true ;;
      L) OPT_LIST_DEVICES=true ;;
      *) return 1 ;;
    esac
  done
  shift $((OPTIND-1))

  exec_options $@
  check_programs
  check_config
  check_devices

  if ! loaded_driver; then load_driver; fi

  launch $@
}

main $@
